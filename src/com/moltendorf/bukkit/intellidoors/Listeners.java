package com.moltendorf.bukkit.intellidoors;

import org.bukkit.event.Event.Priority;
import org.bukkit.event.Event.Type;
import org.bukkit.event.block.BlockListener;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerListener;
import org.bukkit.plugin.PluginManager;

/**
 * Listener register.
 *
 * @author moltendorf
 */
final class Listeners {
	private Listeners() {}

	protected static void Enable() {
		// Prepare controllers.
		final Controller controller = new Controller();

		final BlockForwarder blockController = new BlockForwarder(controller);
		final PlayerForwarder playerController = new PlayerForwarder(controller);

		// Prepare monitors.
		final Monitor monitor = new Monitor();

		final PlayerForwarder playerMonitor = new PlayerForwarder(monitor);

		// Fetch plugin instance and manager.
		final Plugin instance = Plugin.instance;
		final PluginManager manager = instance.getServer().getPluginManager();

		// Register block listeners.
		manager.registerEvent(Type.BLOCK_PHYSICS, blockController, Priority.Highest, instance);
		manager.registerEvent(Type.REDSTONE_CHANGE, blockController, Priority.Highest, instance);

		// Register player listeners.
		manager.registerEvent(Type.PLAYER_INTERACT, playerController, Priority.Lowest, instance);
		manager.registerEvent(Type.PLAYER_INTERACT, playerMonitor, Priority.Monitor, instance);
	}

	/**
	 * Listener callback base class.
	 *
	 * @author moltendorf
	 */
	static protected abstract class Listener {
		public void onBlockPhysics(final BlockPhysicsEvent event) {}
		public void onBlockRedstoneChange(final BlockRedstoneEvent event) {}
		public void onPlayerInteract(final PlayerInteractEvent event) {}
	}

	/**
	 * Handles all events that occur before they are monitored.
	 *
	 * @author moltendorf
	 */
	static protected class Controller extends Listener{
		@Override public void onBlockPhysics(final BlockPhysicsEvent event) {
			// Fail if the event was cancelled.
			if (event.isCancelled()) {
				return;
			}
		}

		@Override public void onBlockRedstoneChange(final BlockRedstoneEvent event) {

		}

		@Override public void onPlayerInteract(final PlayerInteractEvent event) {
			// Fail if the event was cancelled or if there is no block.
			if (event.isCancelled() || !event.hasBlock()) {
				return;
			}
		}
	}

	/**
	 * Monitors the outcomes of all events.
	 *
	 * @author moltendorf
	 */
	static protected class Monitor extends Listener {
		@Override public void onPlayerInteract(final PlayerInteractEvent event) {
			// Fail if the event was cancelled or if there is no block.
			if (event.isCancelled() || !event.hasBlock()) {
				return;
			}
		}
	}

	/**
	 * Forwards events generated by block actions to the plugin's main listener.
	 *
	 * @author moltendorf
	 */
	static protected class BlockForwarder extends BlockListener {
		protected BlockForwarder(final Listener instance) {
			listener = instance;
		}

		final private Listener listener;

		@Override public void onBlockPhysics(final BlockPhysicsEvent event) {
			listener.onBlockPhysics(event);
		}

		@Override public void onBlockRedstoneChange(final BlockRedstoneEvent event) {
			listener.onBlockRedstoneChange(event);
		}
	}

	/**
	 * Forward events generated by player actions to the plugin's main listener.
	 *
	 * @author moltendorf
	 */
	static protected class PlayerForwarder extends PlayerListener {
		protected PlayerForwarder(final Listener instance) {
			listener = instance;
		}

		final private Listener listener;

		@Override public void onPlayerInteract(final PlayerInteractEvent event) {
			listener.onPlayerInteract(event);
		}
	}
}
